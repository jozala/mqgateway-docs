{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MqGateway What is MqGateway MqGateway is gateway device for multiple wired electronic sensors and controllers, which are essential in creating smart home solution. MqGateway has been created to support multi-device, fully wired solution. MqGateway supports MQTT Homie convention and provides easy integration with home automation software like OpenHab and Home Assistant. Both MqGateway hardware and software are freely available under Open Source Licenses. What's the use case? Typical use case for MqGateway is a house with sensors and controllers distributed all around with wired connections. It is possible to plug in simple and inexpensive devices, like relay modules, PIR motion sensors or just plain wall switches into MqGateway to make fully capable home automation system. What's next? Introduction Quick start Installation Hardware","title":"Start"},{"location":"#mqgateway","text":"","title":"MqGateway"},{"location":"#what-is-mqgateway","text":"MqGateway is gateway device for multiple wired electronic sensors and controllers, which are essential in creating smart home solution. MqGateway has been created to support multi-device, fully wired solution. MqGateway supports MQTT Homie convention and provides easy integration with home automation software like OpenHab and Home Assistant. Both MqGateway hardware and software are freely available under Open Source Licenses.","title":"What is MqGateway"},{"location":"#whats-the-use-case","text":"Typical use case for MqGateway is a house with sensors and controllers distributed all around with wired connections. It is possible to plug in simple and inexpensive devices, like relay modules, PIR motion sensors or just plain wall switches into MqGateway to make fully capable home automation system.","title":"What's the use case?"},{"location":"#whats-next","text":"Introduction Quick start Installation Hardware","title":"What's next?"},{"location":"hardware/bill-of-materials/","text":"Bill of materials This page lists all elements required to build MqGateway device on the PCB. PCB is prepared to work with one of the SOC: Nano PI NEO , Raspberry Pi 3 or 4. Theoretically software should work on both, with simple configuration change, but it has not been tested on Raspberry Pi. That is why currently it is advised to use NanoPi NEO. Mainboard Components for MqGateway Mainboard . Full BOM is available here . Basic elements NAME AMOUNT DC Power Jack Plug Socket 2.1/5.5 1 link MCP23017-E/SP 4 link DIP28 Socket 4 link Screw Terminal 2-pin 2 link RJ45 Ethernet Socket 2x8 Ports 1 link Tact switch button 4-pin (6x6mm) 2 link Logic level converter 4-ch 5V to 3.3V 1 link Pin header 2x2 4 link Pin jumper 4 link IDC10 Male Pin PCB Socket 1 link LD1117V33 Linear Voltage Regulator 3.3V 1 link MAX485 TTL to RS-485 Interface Module 1 link LED for power (d=3mm) 1 LED resistor (resistance depends on used LED) 1 2-color LED for status 1 link Green LED Resistor (10\u03a9) 1 Yellow LED Resistor (43\u03a9 1 Power switch, Rocker Switch OFF-ON 1 link Case switch button, 12mm diameter OFF-(ON) 1 link Version with Nano Pi Neo (additional) NAME AMOUNT NanoPi NEO (512M RAM) 1 link NanoPi NEO Heat Sink 1 link IDC24 Male Pin PCB Socket 1 link IDC24 flat ribbon cable 10 cm 1 link Female IDC-plug 24 pin for ribbon cable 2 link Screw M2.5 30mm 4 link Nut for screw M2.5 4 link Version with Raspberry Pi 3/4 (not fully supported yet) NAME AMOUNT Raspberry Pi 2/3/4 1 IDC40 Male Pin PCB Socket 1 IDC40 flat ribbon cable 10 cm 1 IDC40 ribbon connector 2 Screw with nut 4 I/O Expander Board Components for MqGateway I/O Expander Board . Full BOM is available here . NAME AMOUNT DC Power Jack Plug Socket 2.1/5.5 1 link MCP23017-E/SP 4 link DIP28 Socket 4 link Screw Terminal 2-pin 4 link 8P8C/RJ45 Ethernet Socket 2x8 Ports 1 link Pin header 2x2 1 link Pin jumper 2 link IDC10 Male Pin PCB Socket 2 link Female IDC-plug 10 pin for ribbon cable 2 link 10-core ribbon cable 25cm 1 link Terminal Block connector 4-pin (pitch 3.5mm) 1 link Red LED for power d=3mm 1 LED resistor (resistance depends on used LED) 1 Blue LED for CHECK d=3mm 1 LED resistor (resistance depends on used LED) 1 Miniature SPDT Slide Switch (pitch 3mm) 3 link LM2596 DC-DC Step down converter 1 link","title":"Bill of materials"},{"location":"hardware/bill-of-materials/#bill-of-materials","text":"This page lists all elements required to build MqGateway device on the PCB. PCB is prepared to work with one of the SOC: Nano PI NEO , Raspberry Pi 3 or 4. Theoretically software should work on both, with simple configuration change, but it has not been tested on Raspberry Pi. That is why currently it is advised to use NanoPi NEO.","title":"Bill of materials"},{"location":"hardware/bill-of-materials/#mainboard","text":"Components for MqGateway Mainboard . Full BOM is available here .","title":"Mainboard"},{"location":"hardware/bill-of-materials/#basic-elements","text":"NAME AMOUNT DC Power Jack Plug Socket 2.1/5.5 1 link MCP23017-E/SP 4 link DIP28 Socket 4 link Screw Terminal 2-pin 2 link RJ45 Ethernet Socket 2x8 Ports 1 link Tact switch button 4-pin (6x6mm) 2 link Logic level converter 4-ch 5V to 3.3V 1 link Pin header 2x2 4 link Pin jumper 4 link IDC10 Male Pin PCB Socket 1 link LD1117V33 Linear Voltage Regulator 3.3V 1 link MAX485 TTL to RS-485 Interface Module 1 link LED for power (d=3mm) 1 LED resistor (resistance depends on used LED) 1 2-color LED for status 1 link Green LED Resistor (10\u03a9) 1 Yellow LED Resistor (43\u03a9 1 Power switch, Rocker Switch OFF-ON 1 link Case switch button, 12mm diameter OFF-(ON) 1 link","title":"Basic elements"},{"location":"hardware/bill-of-materials/#version-with-nano-pi-neo-additional","text":"NAME AMOUNT NanoPi NEO (512M RAM) 1 link NanoPi NEO Heat Sink 1 link IDC24 Male Pin PCB Socket 1 link IDC24 flat ribbon cable 10 cm 1 link Female IDC-plug 24 pin for ribbon cable 2 link Screw M2.5 30mm 4 link Nut for screw M2.5 4 link","title":"Version with Nano Pi Neo (additional)"},{"location":"hardware/bill-of-materials/#version-with-raspberry-pi-34-not-fully-supported-yet","text":"NAME AMOUNT Raspberry Pi 2/3/4 1 IDC40 Male Pin PCB Socket 1 IDC40 flat ribbon cable 10 cm 1 IDC40 ribbon connector 2 Screw with nut 4","title":"Version with Raspberry Pi 3/4 (not fully supported yet)"},{"location":"hardware/bill-of-materials/#io-expander-board","text":"Components for MqGateway I/O Expander Board . Full BOM is available here . NAME AMOUNT DC Power Jack Plug Socket 2.1/5.5 1 link MCP23017-E/SP 4 link DIP28 Socket 4 link Screw Terminal 2-pin 4 link 8P8C/RJ45 Ethernet Socket 2x8 Ports 1 link Pin header 2x2 1 link Pin jumper 2 link IDC10 Male Pin PCB Socket 2 link Female IDC-plug 10 pin for ribbon cable 2 link 10-core ribbon cable 25cm 1 link Terminal Block connector 4-pin (pitch 3.5mm) 1 link Red LED for power d=3mm 1 LED resistor (resistance depends on used LED) 1 Blue LED for CHECK d=3mm 1 LED resistor (resistance depends on used LED) 1 Miniature SPDT Slide Switch (pitch 3mm) 3 link LM2596 DC-DC Step down converter 1 link","title":"I/O Expander Board"},{"location":"hardware/board-layout/","text":"Mainboard Main components Mainboard is home for the key components of the device. The most important element is System-On-a-Chip computer (SOC) which controls other components and provides Ethernet connection. Four 16-channel port expanders MCP23017 has been used to supply 64 digital input/output ports. MCP23017 are connected by I 2 C protocol going through 2-way level shifter to shift 3.3V signals from SOC to 5V expanders' signals. UART port pins from SOC also going through level shifter (3V3<->5V) can got either directly to I/O RJ45 ports or through optional MAX485 module. This can be set on the board with jumpers on the marked pins. PCB project in KiCAD and Gerber files are available on GitHub and openhardware.io . I/O RJ45 ports Sixteen RJ45 ports are responsible for input and output to sensors and devices like relays. Each port provides: power (+5V and GND) 4 digital input/output wires 2 wires used for UART TTL or RS485 communication See wiring page to learn more about RJ45 ports and role of each wire. Expander IO Board An additional board which adds more input/output ports and make possible to use RS485 bus with 12V powered devices. Currently in development . What's next? See used components Quick start Software installation","title":"Mainboard layout"},{"location":"hardware/board-layout/#mainboard","text":"","title":"Mainboard"},{"location":"hardware/board-layout/#main-components","text":"Mainboard is home for the key components of the device. The most important element is System-On-a-Chip computer (SOC) which controls other components and provides Ethernet connection. Four 16-channel port expanders MCP23017 has been used to supply 64 digital input/output ports. MCP23017 are connected by I 2 C protocol going through 2-way level shifter to shift 3.3V signals from SOC to 5V expanders' signals. UART port pins from SOC also going through level shifter (3V3<->5V) can got either directly to I/O RJ45 ports or through optional MAX485 module. This can be set on the board with jumpers on the marked pins. PCB project in KiCAD and Gerber files are available on GitHub and openhardware.io .","title":"Main components"},{"location":"hardware/board-layout/#io-rj45-ports","text":"Sixteen RJ45 ports are responsible for input and output to sensors and devices like relays. Each port provides: power (+5V and GND) 4 digital input/output wires 2 wires used for UART TTL or RS485 communication See wiring page to learn more about RJ45 ports and role of each wire.","title":"I/O RJ45 ports"},{"location":"hardware/board-layout/#expander-io-board","text":"An additional board which adds more input/output ports and make possible to use RS485 bus with 12V powered devices. Currently in development .","title":"Expander IO Board"},{"location":"hardware/board-layout/#whats-next","text":"See used components Quick start Software installation","title":"What's next?"},{"location":"hardware/case/","text":"MqGateway and I/O expander rack 19\" case This case fits MqGateway and I/O Expander. It is based on standard 1U rack 19\" steel case like this . CAD project describes cutting front of the case. It has corrected position of the hole for USB and Ethernet (on the left) comparing to the photo above. Download FreeCad file DXF file SVG File PDF","title":"Case"},{"location":"hardware/case/#mqgateway-and-io-expander-rack-19-case","text":"This case fits MqGateway and I/O Expander. It is based on standard 1U rack 19\" steel case like this . CAD project describes cutting front of the case. It has corrected position of the hole for USB and Ethernet (on the left) comparing to the photo above.","title":"MqGateway and I/O expander rack 19\" case"},{"location":"hardware/case/#download","text":"FreeCad file DXF file SVG File PDF","title":"Download"},{"location":"hardware/io-expander-board/","text":"I/O Expander Board Info To use I/O Expander board, you need to enable it in MqGateway software configuration. More info in System configuration section I/O Expander Board provides 16 additional ports to connect digital and complex devices. It doubles the number of digital input/output ports available on the Main Board . This board also adds RS485 bus functionality to MqGateway. It means you can connect up to 63 devices communicating through RS485 bus. These devices can optionally be powered with 12V instead of 5V which is a default for MqGateway. Warning Basic support for I/O Expander in MqGateway is ready. It is possible to connect additional devices through additional RJ45 ports. However, implementation to support RS485 bus is not ready yet . Please let me know in the ticket if you are interested with this functionality. Main components Similar to the main board layout - four 16-channel port expanders MCP23017 has been used to supply 64 digital input/output ports. MCP23017 are connected by I 2 C from the main board. UART/RS485 port pins are also provided from the main board. However, if the main board has MAX485 module installed, it is also possible to disable standard UART/RS485 ports in the RJ45 ports (using jumpers) and enable separate RS485 communication bus. Important (but optional) component of the board, is the step down converter from 12V to 5V. It makes possible to power the board with 12V and power the devices on the RS485 bus with 12V instead of 5V. PCB project in KiCAD and Gerber files are available on GitHub . Connection and power supply I/O Expander Board can be connected to MqGateway Mainboard with 10 pin IDC/ribbon cable. It should be connected by using: \"Extra IO Connector\" port on MqGateway Mainboard \"Extra IO Connector IN\" port on I/O Expander Board There are few possible ways to supply power to both boards when using I/O Expander Board. Power with 5V from MqGateway I/O Expander Board This is recommended solution. Use DC input on the right side of I/O Expander Board to supply 5V power to both boards. I/O Expander Board needs to have following switches set: Name of switch Position INPUT left (5V) 5V FROM STEP-DOWN left (OFF) 5V TO/FROM MAIN top (ON) Power with 5V from MqGateway Mainboard Use DC input on the right side of Mainboard to supply 5V power to both boards. I/O Expander Board needs to have following switches set: Name of switch Position INPUT left (5V) 5V FROM STEP-DOWN left (OFF) 5V TO/FROM MAIN top (ON) Power with 12V from MqGateway I/O Expander Board Use DC input on the right side of I/O Expander Board to supply 12V and power both boards. This is the only setting where step down converter module is required on the I/O Expander Board. I/O Expander Board needs to have following switches set: Name of switch Position INPUT right (12V) 5V FROM STEP-DOWN right (ON) 5V TO/FROM MAIN top (ON) I/O RJ45 ports These ports are the same as on the main board. Sixteen RJ45 ports are responsible for input and output to sensors and devices like relays. Each port provides: power (+5V and GND) 4 digital input/output wires 2 wires used for UART TTL or RS485 communication (if RS485 bus is disabled). See wiring page to learn more about RJ45 ports and role of each wire. RS485 bus Looking at the RS485 Connector from front there are following connections (from left to right): RS485 B RS485 A power (GND) power (+5V or +12V) What's next? See used components Quick start Software installation","title":"I/O Expander Board"},{"location":"hardware/io-expander-board/#io-expander-board","text":"Info To use I/O Expander board, you need to enable it in MqGateway software configuration. More info in System configuration section I/O Expander Board provides 16 additional ports to connect digital and complex devices. It doubles the number of digital input/output ports available on the Main Board . This board also adds RS485 bus functionality to MqGateway. It means you can connect up to 63 devices communicating through RS485 bus. These devices can optionally be powered with 12V instead of 5V which is a default for MqGateway. Warning Basic support for I/O Expander in MqGateway is ready. It is possible to connect additional devices through additional RJ45 ports. However, implementation to support RS485 bus is not ready yet . Please let me know in the ticket if you are interested with this functionality.","title":"I/O Expander Board"},{"location":"hardware/io-expander-board/#main-components","text":"Similar to the main board layout - four 16-channel port expanders MCP23017 has been used to supply 64 digital input/output ports. MCP23017 are connected by I 2 C from the main board. UART/RS485 port pins are also provided from the main board. However, if the main board has MAX485 module installed, it is also possible to disable standard UART/RS485 ports in the RJ45 ports (using jumpers) and enable separate RS485 communication bus. Important (but optional) component of the board, is the step down converter from 12V to 5V. It makes possible to power the board with 12V and power the devices on the RS485 bus with 12V instead of 5V. PCB project in KiCAD and Gerber files are available on GitHub .","title":"Main components"},{"location":"hardware/io-expander-board/#connection-and-power-supply","text":"I/O Expander Board can be connected to MqGateway Mainboard with 10 pin IDC/ribbon cable. It should be connected by using: \"Extra IO Connector\" port on MqGateway Mainboard \"Extra IO Connector IN\" port on I/O Expander Board There are few possible ways to supply power to both boards when using I/O Expander Board.","title":"Connection and power supply"},{"location":"hardware/io-expander-board/#power-with-5v-from-mqgateway-io-expander-board","text":"This is recommended solution. Use DC input on the right side of I/O Expander Board to supply 5V power to both boards. I/O Expander Board needs to have following switches set: Name of switch Position INPUT left (5V) 5V FROM STEP-DOWN left (OFF) 5V TO/FROM MAIN top (ON)","title":"Power with 5V from MqGateway I/O Expander Board"},{"location":"hardware/io-expander-board/#power-with-5v-from-mqgateway-mainboard","text":"Use DC input on the right side of Mainboard to supply 5V power to both boards. I/O Expander Board needs to have following switches set: Name of switch Position INPUT left (5V) 5V FROM STEP-DOWN left (OFF) 5V TO/FROM MAIN top (ON)","title":"Power with 5V from MqGateway Mainboard"},{"location":"hardware/io-expander-board/#power-with-12v-from-mqgateway-io-expander-board","text":"Use DC input on the right side of I/O Expander Board to supply 12V and power both boards. This is the only setting where step down converter module is required on the I/O Expander Board. I/O Expander Board needs to have following switches set: Name of switch Position INPUT right (12V) 5V FROM STEP-DOWN right (ON) 5V TO/FROM MAIN top (ON)","title":"Power with 12V from MqGateway I/O Expander Board"},{"location":"hardware/io-expander-board/#io-rj45-ports","text":"These ports are the same as on the main board. Sixteen RJ45 ports are responsible for input and output to sensors and devices like relays. Each port provides: power (+5V and GND) 4 digital input/output wires 2 wires used for UART TTL or RS485 communication (if RS485 bus is disabled). See wiring page to learn more about RJ45 ports and role of each wire.","title":"I/O RJ45 ports"},{"location":"hardware/io-expander-board/#rs485-bus","text":"Looking at the RS485 Connector from front there are following connections (from left to right): RS485 B RS485 A power (GND) power (+5V or +12V)","title":"RS485 bus"},{"location":"hardware/io-expander-board/#whats-next","text":"See used components Quick start Software installation","title":"What's next?"},{"location":"hardware/mysensors-node/","text":"Work in progress...","title":"MySensor node"},{"location":"hardware/wiring/","text":"This page describes the connectors for devices in MqGateway. RJ45 devices ports MqGateway has 16 RJ45 ports which are not ethernet ports, but are used to connect devices (e.g. relays) and sensors (e.g. temperature). Every RJ45 connector uses T568B termination. It means - wires in a connector are in following order: COLOR USAGE 1 orange +5V 2 orange-white GND 3 blue digital in/out 4 blue-white digital in/out 5 green digital in/out 6 green-white digital in/out 7 brown TX or A (RS485) 8 brown-white RX or B (RS485)","title":"Wiring"},{"location":"hardware/wiring/#rj45-devices-ports","text":"MqGateway has 16 RJ45 ports which are not ethernet ports, but are used to connect devices (e.g. relays) and sensors (e.g. temperature). Every RJ45 connector uses T568B termination. It means - wires in a connector are in following order: COLOR USAGE 1 orange +5V 2 orange-white GND 3 blue digital in/out 4 blue-white digital in/out 5 green digital in/out 6 green-white digital in/out 7 brown TX or A (RS485) 8 brown-white RX or B (RS485)","title":"RJ45 devices ports"},{"location":"user-guide/configuration/","text":"There are two types of the configuration for MqGateway: Devices configuration (in gateway.yaml file) Configures what and how smart devices are connected to MqGateway and MQTT broker connection. System configuration (passed by environment variables) Rarely needs adjustments. Configures stuff related to underlying hardware and features availability. Devices configuration Configures what and how smart devices are connected to MqGateway and MQTT broker connection. Hint There is a JSON schema file for this configuration. Use it with your favourite YAML editor (e.g. IntelliJ or VSCode) for autocompletion and instant validation. Structure Basic structure of the configuration is like this: configVersion : \"1.1\" # Version of MqGateway configuration file - defines configuration structure name : \"MainGateway\" # Name of Gateway - unique for MQTT broker (used as part of the MQTT topic) mqttHostname : \"192.168.1.100\" # Address IP or hostname of MQTT broker rooms : # List of rooms managed by this Gateway - name : \"living room\" # name of the room points : # List of points (each place connected with single UTP cable) - name : \"outlet behind TV\" portNumber : 10 # Number of port in Gateway to which point is connected (1-16) devices : # List of devices connected to single point/cable - name : \"TV power\" # Human-readable name of the device id : \"tv_power\" # Unique identifier for the device across all devices on this Gateway type : RELAY # type of the device (see \"Supported devices\") [ ... ] # further configuration structure for the device depends on the type of the device For the structure of configuration for specific devices see supported devices examples . Loading devices configuration By default, MqGateway expects devices configuration file to be named gateway.yaml and to be available in the current working directory. It means, it should be available in the directory from where MqGateway application is started on NanoPi NEO. You can change the path by specifying other path in environment variable GATEWAY.CONFIGPATH like this: export GATEWAY_CONFIGPATH = \"/opt/gateway-configuration.yaml\" Remember to add this command to ~/.bashrc if you want it to survive MqGateway reboot. Internal device reference In the case when you need to configure some device with \"internalDevices\" and this internal device is connected in another point (to a different MqGateway port) you need to use REFERENCE device type to configure it. See the example below which configures garage door (GATE device) with reed switch configured as REFERENCE device, because it is connected to different port than the garage door opener. Example configVersion : \"1.1\" name : \"MainGateway\" mqttHostname : \"192.168.1.100\" rooms : - name : \"garage\" points : - name : \"Garage door opener\" portNumber : 1 devices : - name : \"Right garage door\" id : \"right_garage_door\" type : GATE internalDevices : actionButton : name : \"Right garage door action button\" id : \"right_garage_door_action_button\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH closedReedSwitch : name : \"Right garage door closed reed switch reference\" id : \"right_garage_door_closed_ref\" type : REFERENCE referencedDeviceId : \"right_garage_door_closed_reed\" # <-- it references to the device below on point with portNumber 2 - name : \"Garage door reed switch\" portNumber : 2 devices : - name : \"Right garage door\" id : \"right_garage_door_closed_reed\" wires : [ \"GREEN_WHITE\" ] type : REED_SWITCH System configuration Rarely needs adjustments. Configures stuff related to underlying hardware and features availability. NAME DEFAULT DESCRIPTION GATEWAY_CONFIGPATH gateway.yaml path to the devices configuration file GATEWAY_SYSTEM_NETWORKADAPTER eth0 name of the ethernet interface used to connect to MQTT GATEWAY_SYSTEM_PLATFORM NANOPI name of the controller used on MqGateway (currently only NANOPI) GATEWAY_SYSTEM_EXPANDER_ENABLED false should be \"true\" if you have I/O Expander board connected GATEWAY_SYSTEM_COMPONENTS_MCP23017_PORTS (depends on I/O expander enablement) I2C addresses of MCP23017 expanders GATEWAY_SYSTEM_COMPONENTS_MYSENSORS_ENABLED true MySensors devices through RS485 communication enabled/disabled GATEWAY_SYSTEM_COMPONENTS_MYSENSORS_SERIAL_DEVICE /myserial path to device used for serial communication with MySensors gateway (can be PTY)","title":"Configuration"},{"location":"user-guide/configuration/#devices-configuration","text":"Configures what and how smart devices are connected to MqGateway and MQTT broker connection. Hint There is a JSON schema file for this configuration. Use it with your favourite YAML editor (e.g. IntelliJ or VSCode) for autocompletion and instant validation.","title":"Devices configuration"},{"location":"user-guide/configuration/#structure","text":"Basic structure of the configuration is like this: configVersion : \"1.1\" # Version of MqGateway configuration file - defines configuration structure name : \"MainGateway\" # Name of Gateway - unique for MQTT broker (used as part of the MQTT topic) mqttHostname : \"192.168.1.100\" # Address IP or hostname of MQTT broker rooms : # List of rooms managed by this Gateway - name : \"living room\" # name of the room points : # List of points (each place connected with single UTP cable) - name : \"outlet behind TV\" portNumber : 10 # Number of port in Gateway to which point is connected (1-16) devices : # List of devices connected to single point/cable - name : \"TV power\" # Human-readable name of the device id : \"tv_power\" # Unique identifier for the device across all devices on this Gateway type : RELAY # type of the device (see \"Supported devices\") [ ... ] # further configuration structure for the device depends on the type of the device For the structure of configuration for specific devices see supported devices examples .","title":"Structure"},{"location":"user-guide/configuration/#loading-devices-configuration","text":"By default, MqGateway expects devices configuration file to be named gateway.yaml and to be available in the current working directory. It means, it should be available in the directory from where MqGateway application is started on NanoPi NEO. You can change the path by specifying other path in environment variable GATEWAY.CONFIGPATH like this: export GATEWAY_CONFIGPATH = \"/opt/gateway-configuration.yaml\" Remember to add this command to ~/.bashrc if you want it to survive MqGateway reboot.","title":"Loading devices configuration"},{"location":"user-guide/configuration/#internal-device-reference","text":"In the case when you need to configure some device with \"internalDevices\" and this internal device is connected in another point (to a different MqGateway port) you need to use REFERENCE device type to configure it. See the example below which configures garage door (GATE device) with reed switch configured as REFERENCE device, because it is connected to different port than the garage door opener. Example configVersion : \"1.1\" name : \"MainGateway\" mqttHostname : \"192.168.1.100\" rooms : - name : \"garage\" points : - name : \"Garage door opener\" portNumber : 1 devices : - name : \"Right garage door\" id : \"right_garage_door\" type : GATE internalDevices : actionButton : name : \"Right garage door action button\" id : \"right_garage_door_action_button\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH closedReedSwitch : name : \"Right garage door closed reed switch reference\" id : \"right_garage_door_closed_ref\" type : REFERENCE referencedDeviceId : \"right_garage_door_closed_reed\" # <-- it references to the device below on point with portNumber 2 - name : \"Garage door reed switch\" portNumber : 2 devices : - name : \"Right garage door\" id : \"right_garage_door_closed_reed\" wires : [ \"GREEN_WHITE\" ] type : REED_SWITCH","title":"Internal device reference"},{"location":"user-guide/configuration/#system-configuration","text":"Rarely needs adjustments. Configures stuff related to underlying hardware and features availability. NAME DEFAULT DESCRIPTION GATEWAY_CONFIGPATH gateway.yaml path to the devices configuration file GATEWAY_SYSTEM_NETWORKADAPTER eth0 name of the ethernet interface used to connect to MQTT GATEWAY_SYSTEM_PLATFORM NANOPI name of the controller used on MqGateway (currently only NANOPI) GATEWAY_SYSTEM_EXPANDER_ENABLED false should be \"true\" if you have I/O Expander board connected GATEWAY_SYSTEM_COMPONENTS_MCP23017_PORTS (depends on I/O expander enablement) I2C addresses of MCP23017 expanders GATEWAY_SYSTEM_COMPONENTS_MYSENSORS_ENABLED true MySensors devices through RS485 communication enabled/disabled GATEWAY_SYSTEM_COMPONENTS_MYSENSORS_SERIAL_DEVICE /myserial path to device used for serial communication with MySensors gateway (can be PTY)","title":"System configuration"},{"location":"user-guide/installation/","text":"Connect to NanoPi NEO with SSH Download installation script: curl -o mqgateway-install.sh -L https://raw.githubusercontent.com/aetas/mqgateway/master/installation-scripts/mqgateway-install.sh Make script executable and run it: chmod +x mqgateway-install.sh ./mqgateway-install.sh Installation script will: Enable I 2 C and UART ports Download and build WiringNP library Install Java JRE Download the latest version of MqGateway Prepare basic configuration for MqGateway (requires adjustments before running MqGateway) Prepare and enable a service which will ensure MqGateway is running all the time, even in case of device restart In case of problems with installation - see logs in file /opt/mqgateway/mqgateway-install.log Edit MqGateway configuration with an editor of your choice (e.g. nano or vim) to change address of MQTT server: configVersion : \"1.1\" name : \"TestGateway\" mqttHostname : \"192.168.1.150\" # set IP of your MQTT broker rooms : # change devices configuration - name : \"workshop\" points : - name : \"point with test relay\" portNumber : 1 devices : - name : \"test relay\" id : \"my-relay\" wires : [ \"BLUE\" ] type : RELAY For more details on configuration files see configuration page and examples for supported devices . Reboot your NanoPI NEO to enable I 2 C and serial ports. MqGateway always starts automatically on start of NanoPi NEO. What's next? Supported devices and configuration","title":"Installation"},{"location":"user-guide/installation/#whats-next","text":"Supported devices and configuration","title":"What's next?"},{"location":"user-guide/integration/","text":"This page describes how to configure home automation applications (like Home Assistant and OpenHab) to integrate with them and control devices connected to MqGateway. Home Assistant The easiest way to integrate MqGateway is to use Home Assistant MQTT discovery . MqGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. All you need to do is to enable MQTT integration in Home Assistant as described in the HA documentation . After MqGateway start, you should be able to see all the MqGateway configured devices as devices and entities in Home Assistant. If you want to disable broadcasting Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED=false on NanoPi NEO. OpenHab OpenHab MQTT Binding supports Home Assistant MQTT discovery . MqGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. If you want to disable broadcasting Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED=false on NanoPi NEO. Although OpenHab supports Homie convention 3.0.1 which is followed by MqGateway - using Home Assistant MQTT discovery gives more detailed configuration automatically. General communication MqGateway works as the MQTT gateway. This means you can integrate it to any home automation platform which supports MQTT devices. Additionally, it supports Home Assistant MQTT discovery feature which is also supported in OpenHab MQTT binding . MqGateway follows Homie convention 3.0.1 for MQTT communication. Homies MQTT topic layout follows the pattern homie/device/node/property . Device is a name of your MqGateway (see how to set name in configuration ). Node is a unique string identifier of the sensor/controller connected to MqGateway ( id in configuration ). Property can be a \"temperature\" when reading value from BME280 module or \"state\" in case of PIR motion sensor. Examples: homie/MyGateway/workshop_bme/temperature for reading temperature from BME280 on the id = \"workshop_bme\" homie/MyGateway/kitchen_bme/humidity for reading humidity from BME280 on the id = \"kitchen_bme\" homie/MyGateway/wardrobe_motion/state for reading motion sensor state on the id = \"wardrobe_motion\" ( ON if motion has started, OFF otherwise) When device supports setting a value (e.g. relay), desired value should be send to homie/device/node/property/set topic Example: send ON to homie/MyGateway/wordrobe_light/state/set to switch on light connected to relay on id = \"wardrobe_light\"","title":"Integration"},{"location":"user-guide/integration/#home-assistant","text":"The easiest way to integrate MqGateway is to use Home Assistant MQTT discovery . MqGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. All you need to do is to enable MQTT integration in Home Assistant as described in the HA documentation . After MqGateway start, you should be able to see all the MqGateway configured devices as devices and entities in Home Assistant. If you want to disable broadcasting Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED=false on NanoPi NEO.","title":"Home Assistant"},{"location":"user-guide/integration/#openhab","text":"OpenHab MQTT Binding supports Home Assistant MQTT discovery . MqGateway will automatically broadcast all devices' configuration under \"homeassistant/\" topic when connected to MQTT broker. If you want to disable broadcasting Home Assistant configuration to MQTT, set environment variable HOMEASSISTANT_ENABLED=false on NanoPi NEO. Although OpenHab supports Homie convention 3.0.1 which is followed by MqGateway - using Home Assistant MQTT discovery gives more detailed configuration automatically.","title":"OpenHab"},{"location":"user-guide/integration/#general-communication","text":"MqGateway works as the MQTT gateway. This means you can integrate it to any home automation platform which supports MQTT devices. Additionally, it supports Home Assistant MQTT discovery feature which is also supported in OpenHab MQTT binding . MqGateway follows Homie convention 3.0.1 for MQTT communication. Homies MQTT topic layout follows the pattern homie/device/node/property . Device is a name of your MqGateway (see how to set name in configuration ). Node is a unique string identifier of the sensor/controller connected to MqGateway ( id in configuration ). Property can be a \"temperature\" when reading value from BME280 module or \"state\" in case of PIR motion sensor. Examples: homie/MyGateway/workshop_bme/temperature for reading temperature from BME280 on the id = \"workshop_bme\" homie/MyGateway/kitchen_bme/humidity for reading humidity from BME280 on the id = \"kitchen_bme\" homie/MyGateway/wardrobe_motion/state for reading motion sensor state on the id = \"wardrobe_motion\" ( ON if motion has started, OFF otherwise) When device supports setting a value (e.g. relay), desired value should be send to homie/device/node/property/set topic Example: send ON to homie/MyGateway/wordrobe_light/state/set to switch on light connected to relay on id = \"wardrobe_light\"","title":"General communication"},{"location":"user-guide/introduction/","text":"This section describes how MqGateway works and how it can be used for home automation. Why and when to use it? Typical smart home solution is based on multiple sensors and controllers distributed around the house (e.g. temperature, motion, light sensors, switch buttons, relays, buzzers). Central component of the system is home automation application like OpenHab or Home Assistant which allows you to set rules and control devices with graphical interface and mobile application. Binding those elements is usually done either with some vendor gateway (e.g. Z-Wave Gateway) or by connecting sensors to microcontroller (e.g. ESP8266, Arduino) which communicates with home automation application. The problem with the vendor gateway solution is these are mostly only wireless and often closed solution. This unfortunately means - monitoring and changing batteries (plus a lot of radio waves around the house). Additionally, vendor sensors are relatively expensive comparing to the bare modules which can be used with Arduino. Connecting a sensor to Arduino or similar microcontroller will save a lot of money on sensors, because you can use cheap, ready-to-use modules, but you still need to send data from microcontroller to home automation application. This can be done wireless (WiFi or RF), but it gets us back to the problem with batteries and radio noise. Even if you add wired connection (e.g. ethernet) to microcontroller, having single microcontroller for each one or two sensors is not very cost-effective. Problems described above are the ones MqGateway is trying to solve. Basic MqGateway allows you to connect: up to 64 digital input/output devices (like relays or switch buttons) and up to 16 complex devices using RS485 communication (with MySensors ). Connecting more devices is possible by using MqGateway I/O Expander board . List of supported devices can be found on supported devices page. MqGateway supports cheap modules which work with Arduino microcontrollers, including relay modules, buttons and temperature sensors. MqGateway works with wired sensors and controllers to avoid the problem with batteries and radio noise. Additionally, if you want to connect devices to MqGateway - you are not expected to know anything about programming. All you need to prepare is a YAML configuration file . MqGateway is for you if you: Want to save money on sensors and controllers. Prefer wired over wireless components. Like to limit number of microcontrollers for sensors. Don't want to program microcontrollers yourself. Composition The heart of the MqGateway is NanoPi Neo SBC. This is a board, similar to the popular Raspberry Pi. It controls all connected devices and communicates with home automation application through MQTT broker. This communication is done either using build-in ethernet controller or with additional USB WiFi adapter. Find out more about hardware and board layout in hardware section . Devices can be connected through sixteen RJ45 ports. Each RJ45 port provides: power (+5V and GND), 4 digital input/output wires, 2 wires for UART or RS485 communication. Look at wiring in hardware section if you want to know more. Wiring examples As mentioned earlier, common home automation system consists of multiple sensors distributed around the house. You need to connect those to home automation application which is running on a computer connected to home network. A simple relay or temperature sensor modules (e.g. DTH22) do not have Wi-Fi or Ethernet port. Instead, they can be controlled (or send information) with single digital wire. MqGateway will work as a proxy between those sensors and home automation application. For the communication layer it uses MQTT broker which is supported by most of the open home automation applications (including OpenHab and Home Assistant). One example usage is when you have module of 4 relays controlling lights in your house. Then you need to use single RJ45 port of MqGateway. Orange and white-orange wires will power your relay module with 5V. Use blue, white-blue, green and white-green wires to control relay states. Another example is to read state from PIR motion sensor module. Take a UTP cable plugged into MqGateway RJ45 port and use orange and white-orange wires to power the module. Then use any of available digital wires (green, white-green, blue or white-blue) for output connection. When wiring is ready then you need to prepare configuration in YAML file to tell MqGateway what kind of module is connected to which RJ45 port and on which wire colour. What's next? Hardware Quick start","title":"Introduction"},{"location":"user-guide/introduction/#why-and-when-to-use-it","text":"Typical smart home solution is based on multiple sensors and controllers distributed around the house (e.g. temperature, motion, light sensors, switch buttons, relays, buzzers). Central component of the system is home automation application like OpenHab or Home Assistant which allows you to set rules and control devices with graphical interface and mobile application. Binding those elements is usually done either with some vendor gateway (e.g. Z-Wave Gateway) or by connecting sensors to microcontroller (e.g. ESP8266, Arduino) which communicates with home automation application. The problem with the vendor gateway solution is these are mostly only wireless and often closed solution. This unfortunately means - monitoring and changing batteries (plus a lot of radio waves around the house). Additionally, vendor sensors are relatively expensive comparing to the bare modules which can be used with Arduino. Connecting a sensor to Arduino or similar microcontroller will save a lot of money on sensors, because you can use cheap, ready-to-use modules, but you still need to send data from microcontroller to home automation application. This can be done wireless (WiFi or RF), but it gets us back to the problem with batteries and radio noise. Even if you add wired connection (e.g. ethernet) to microcontroller, having single microcontroller for each one or two sensors is not very cost-effective. Problems described above are the ones MqGateway is trying to solve. Basic MqGateway allows you to connect: up to 64 digital input/output devices (like relays or switch buttons) and up to 16 complex devices using RS485 communication (with MySensors ). Connecting more devices is possible by using MqGateway I/O Expander board . List of supported devices can be found on supported devices page. MqGateway supports cheap modules which work with Arduino microcontrollers, including relay modules, buttons and temperature sensors. MqGateway works with wired sensors and controllers to avoid the problem with batteries and radio noise. Additionally, if you want to connect devices to MqGateway - you are not expected to know anything about programming. All you need to prepare is a YAML configuration file . MqGateway is for you if you: Want to save money on sensors and controllers. Prefer wired over wireless components. Like to limit number of microcontrollers for sensors. Don't want to program microcontrollers yourself.","title":"Why and when to use it?"},{"location":"user-guide/introduction/#composition","text":"The heart of the MqGateway is NanoPi Neo SBC. This is a board, similar to the popular Raspberry Pi. It controls all connected devices and communicates with home automation application through MQTT broker. This communication is done either using build-in ethernet controller or with additional USB WiFi adapter. Find out more about hardware and board layout in hardware section . Devices can be connected through sixteen RJ45 ports. Each RJ45 port provides: power (+5V and GND), 4 digital input/output wires, 2 wires for UART or RS485 communication. Look at wiring in hardware section if you want to know more.","title":"Composition"},{"location":"user-guide/introduction/#wiring-examples","text":"As mentioned earlier, common home automation system consists of multiple sensors distributed around the house. You need to connect those to home automation application which is running on a computer connected to home network. A simple relay or temperature sensor modules (e.g. DTH22) do not have Wi-Fi or Ethernet port. Instead, they can be controlled (or send information) with single digital wire. MqGateway will work as a proxy between those sensors and home automation application. For the communication layer it uses MQTT broker which is supported by most of the open home automation applications (including OpenHab and Home Assistant). One example usage is when you have module of 4 relays controlling lights in your house. Then you need to use single RJ45 port of MqGateway. Orange and white-orange wires will power your relay module with 5V. Use blue, white-blue, green and white-green wires to control relay states. Another example is to read state from PIR motion sensor module. Take a UTP cable plugged into MqGateway RJ45 port and use orange and white-orange wires to power the module. Then use any of available digital wires (green, white-green, blue or white-blue) for output connection. When wiring is ready then you need to prepare configuration in YAML file to tell MqGateway what kind of module is connected to which RJ45 port and on which wire colour.","title":"Wiring examples"},{"location":"user-guide/introduction/#whats-next","text":"Hardware Quick start","title":"What's next?"},{"location":"user-guide/logging/","text":"In case of any problems it is worth to look into MqGateway logs. This page describes where to find logs. Current log file Current logs of MqGateway application can be found in logs/application.log file. Path is relative from where MqGateway is started. Logs rotation Log files are rolled every day at midnight. Logs from previous days can be found in files with named: logs/app-%d{yyyy-MM-dd}.log . Log files older than 30 days are deleted automatically.","title":"Logging"},{"location":"user-guide/logging/#current-log-file","text":"Current logs of MqGateway application can be found in logs/application.log file. Path is relative from where MqGateway is started.","title":"Current log file"},{"location":"user-guide/logging/#logs-rotation","text":"Log files are rolled every day at midnight. Logs from previous days can be found in files with named: logs/app-%d{yyyy-MM-dd}.log . Log files older than 30 days are deleted automatically.","title":"Logs rotation"},{"location":"user-guide/naming-convention/","text":"Homie device - same as MqGateway - it is not the same as \"device\" (see below) Device - sensor or controller connected to MqGateway (e.g. relay module, switch button or MySensors RS485 node) MySensors RS485 node - Additional controller (e.g. Arduino Pro Mini) used to provide communication with MqGateway, for devices which are using other communication channels than simple digital wire (e.g. serial, analog, I2C or 1-Wire). See MySensors page for more information. Point - each place connected to MqGateway with single ethernet/UTP cable, can have many devices connected to it Room - space containing multiple points, it helps divide configuration into logical parts, but has currently no other influence on how MqGateway works (e.g. kitchen which has multiple light switches) Wire - single wire of UTP cable which may be used to connect one digital device or MySensors RS485 node (requires two wires).","title":"Naming convention"},{"location":"user-guide/quick-start/","text":"Info This quick start guide assumes you have MqGateway hardware ready. If you are looking for how to prepare the hardware - look into hardware section . Quick start guide shows how to connect a relay module and configure MqGateway to control it. Connecting other types of devices is similar and can be done with the similar steps. Remember that electricity can be dangerous. I encourage you to try this guide without high voltage electricity, only 5V power and relay module (EMR type). This way is much safer, and you still will be able to know it works correctly, because toggling this type of relay can be easily heard. What do you need NanoPI NEO with Armbian installed and SSH connection established Assembled MqGateway with 5V power supply Running MQTT broker (e.g. Mosquitto ) MQTT client installed on your computer (e.g. MQTT Explorer ) Relay module (EMR) with screw connectors Additional ethernet cable (with RJ45 connector on one side only) to connect relay module Connect and configure device Warning Make sure MqGateway is never connected to power supply and micro USB port at the same time. This will destroy the device and may damage your computer. Connect to NanoPi NEO with SSH and run MqGateway installation script (requires root): curl https://raw.githubusercontent.com/aetas/mqgateway/master/installation-scripts/mqgateway-install.sh | sudo bash Edit MqGateway configuration with an editor of your choice (e.g. nano or vim) to change address of MQTT server: configVersion : \"1.1\" name : \"TestGateway\" mqttHostname : \"192.168.1.150\" # set IP of your MQTT broker rooms : - name : \"workshop\" points : - name : \"point with test relay\" portNumber : 1 devices : - name : \"test relay\" id : \"my-relay\" wires : [ \"BLUE\" ] type : RELAY For more details on configuration files see configuration page . Reboot your NanoPI NEO to enable I 2 C and serial ports. MqGateway always starts automatically on start of NanoPi NEO. Prepare ethernet cable with the connector on one side (according to standard T568B) Connect relay module to ethernet cable ( photo ) module pin wire color VCC/DC+ orange ground/DC- orange-white control/IN blue Connect the module to MqGateway port 1 ( ports ) On your computer - open MQTT Explorer to see device has been initialized (connect to your MQTT broker and check topics) If everything went right - you should see topic homie/TestGateway/my-relay Sample output in MQTT Explorer Send MQTT message to toggle relay state (replace IP address with your MQTT broker address) Set Topic to \"homie/TestGateway/my-relay/state/set\" Set message to \"ON\" Press \"PUBLISH\" Send with MQTT Explorer State of the relay should change. You should easily hear the characteristic click of the EMR relay. You can try to send \"OFF\" and \"ON\" for a few more times to check that. Congratulation! You have just configured your first device on MqGateway \ud83c\udf89. If you have Home Assistant configured to use the same MQTT broker - new device is also available there. What's next? Read full user guide, starting with naming conventions Find out all supported devices","title":"Quick Start"},{"location":"user-guide/quick-start/#what-do-you-need","text":"NanoPI NEO with Armbian installed and SSH connection established Assembled MqGateway with 5V power supply Running MQTT broker (e.g. Mosquitto ) MQTT client installed on your computer (e.g. MQTT Explorer ) Relay module (EMR) with screw connectors Additional ethernet cable (with RJ45 connector on one side only) to connect relay module","title":"What do you need"},{"location":"user-guide/quick-start/#connect-and-configure-device","text":"Warning Make sure MqGateway is never connected to power supply and micro USB port at the same time. This will destroy the device and may damage your computer. Connect to NanoPi NEO with SSH and run MqGateway installation script (requires root): curl https://raw.githubusercontent.com/aetas/mqgateway/master/installation-scripts/mqgateway-install.sh | sudo bash Edit MqGateway configuration with an editor of your choice (e.g. nano or vim) to change address of MQTT server: configVersion : \"1.1\" name : \"TestGateway\" mqttHostname : \"192.168.1.150\" # set IP of your MQTT broker rooms : - name : \"workshop\" points : - name : \"point with test relay\" portNumber : 1 devices : - name : \"test relay\" id : \"my-relay\" wires : [ \"BLUE\" ] type : RELAY For more details on configuration files see configuration page . Reboot your NanoPI NEO to enable I 2 C and serial ports. MqGateway always starts automatically on start of NanoPi NEO. Prepare ethernet cable with the connector on one side (according to standard T568B) Connect relay module to ethernet cable ( photo ) module pin wire color VCC/DC+ orange ground/DC- orange-white control/IN blue Connect the module to MqGateway port 1 ( ports ) On your computer - open MQTT Explorer to see device has been initialized (connect to your MQTT broker and check topics) If everything went right - you should see topic homie/TestGateway/my-relay Sample output in MQTT Explorer Send MQTT message to toggle relay state (replace IP address with your MQTT broker address) Set Topic to \"homie/TestGateway/my-relay/state/set\" Set message to \"ON\" Press \"PUBLISH\" Send with MQTT Explorer State of the relay should change. You should easily hear the characteristic click of the EMR relay. You can try to send \"OFF\" and \"ON\" for a few more times to check that. Congratulation! You have just configured your first device on MqGateway \ud83c\udf89. If you have Home Assistant configured to use the same MQTT broker - new device is also available there.","title":"Connect and configure device"},{"location":"user-guide/quick-start/#whats-next","text":"Read full user guide, starting with naming conventions Find out all supported devices","title":"What's next?"},{"location":"user-guide/supported-devices/","text":"This is a list of devices currently supported by MqGateway. That means you can connect a device either with digital wires or through MySensors RS485 node to MqGateway. All supported devices need to be compatible with 5V power supply. Danger Electricity can be very harmful! Please do not connect anything to electricity yourself if you don't have enough knowledge, and you are not completely sure what you are doing. Warning Information below has been provided as a pointer. I've tried to prepare it as accurately as I was able to. However, it may contain errors. Always check the device manual and do not connect electrical wires if you are not absolutely sure you know what you're doing. Digital devices Relay module Relay module which allows turning on/off electrical devices and lights. Controlled with LOW signal by default. configuration type: RELAY additional configuration: triggerLevel [one of: LOW , HIGH] - The signal LEVEL which triggers the relay and closes the circuit haComponent [one of: switch , light] - type of the entity for Home Assistant MQTT discovery Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"point with relay\" portNumber : 1 devices : - name : \"workshop light\" id : \"workshop_light\" wires : [ \"BLUE\" ] type : RELAY config : triggerLevel : \"HIGH\" haComponent : \"light\" Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module working with 5V power can be used. Relay should be controlled with LOW signal. Any digital wire can be used for communication: blue, blue-white, green, green-white. WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN Switch button Switch button or push button. configuration type: SWITCH_BUTTON additional configuration: debounceMs [default: 50] - number of milliseconds for debounce (helps to avoid flickering) longPressTimeMs [default: 1000] - if switch button is pressed for longer then this value (in milliseconds) then \"long press\" event is sent from MqGateway haComponent [one of: binary_sensor , trigger, sensor] - type of the entity for Home Assistant MQTT discovery Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"point with relay\" portNumber : 1 devices : - name : \"workshop light switch\" id : \"workshop_light_switch\" wires : [ \"BLUE_WHITE\" ] type : SWITCH_BUTTON config : longPressTimeMs : 800 debounceMs : 80 haComponent : \"sensor\" Wiring Any regular switch/push button can be used for that. Orange-white wire (GND) and one of the digital wires (blue, blue-white, green, green-white) should be used. Emulated switch Emulates switch button press with changing digital output from HIGH to LOW for 500ms and back to HIGH state. It is useful for controlling devices which has possibility to connect switch button (e.g. garage gate opener). configuration type: EMULATED_SWITCH additional configuration: NONE Example configuration [ ... ] rooms : - name : \"garage\" points : - name : \"2-channels relay module\" portNumber : 1 devices : - name : \"Right gate\" id : \"garage_right_gate\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH Wiring Emulated switch is realized using electromechanical relay (EMR - the most common type). Between MqGateway and the relay: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN Between the relay and gate opener, use COM and NO on the relay. On the gate opener side - connect wires according to your gate opener manual for connecting wall switch button. Motion detector PIR Motion Sensor/Detector. configuration type: MOTION_DETECTOR additional configuration: debounceMs [default: 50] - number of milliseconds for debounce (helps to avoid flickering) motionSignalLevel [one of: HIGH , LOW] - The signal LEVEL which means that motion has been detected Example configuration [ ... ] rooms : - name : \"garage\" points : - name : \"Right garage entry\" portNumber : 1 devices : - name : \"Garage motion\" id : \"garage_motion\" wires : [ \"GREEN\" ] type : MOTION_DETECTOR config : debounceMs : 100 motionSignalLevel : LOW Wiring WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital OUT Reed switch A magnetic sensor which might be used to check if door or window is open/closed. configuration type: REED_SWITCH additional configuration: debounceMs [default: 50] - number of milliseconds for debounce (helps to avoid flickering) Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"Workshop over door box\" portNumber : 1 devices : - name : \"Workshop door\" id : \"workshop_door\" wires : [ \"GREEN\" ] type : REED_SWITCH config : debounceMs : 100 Wiring Any reed switch can be used for that. Orange-white wire (GND) and one of the digital wires (blue, blue-white, green, green-white) should be used. Timer switch Switch which can be turned on for a given time and will be automatically turned off after that time. Typical use case for this device is a sprinkler system which you want to turn off after specified time even if your main automation system has failed for any reason. configuration type: TIMER_SWITCH additional configuration: NONE Example configuration [ ... ] rooms : - name : \"garage\" points : - name : \"sprinklers box\" portNumber : 5 devices : - name : \"Sprinklers zone 1\" id : \"sprinklers_zone_1\" wires : [ \"GREEN_WHITE\" ] type : TIMER_SWITCH Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module working with 5V power can be used. Relay should be controlled with LOW signal. Any digital wire can be used for communication: blue, blue-white, green, green-white. WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN Window shutter Window shutter/roller blind control. Replaces the regular switch button control with 2-channels relay module. Allows to fully open/close shutters and partial opening with percentage (e.g. 30% open). configuration type: SHUTTER internal devices: stopRelay ( relay ) [required] upDownRelay ( relay ) [required] additional configuration: fullCloseTimeMs [required] - time in milliseconds for the shutter from being fully open to fully closed fullOpenTimeMs [required] - time in milliseconds for the shutter from being fully closed to fully open Example configuration rooms : - name : \"living room\" points : - name : \"shutters controller relays\" portNumber : 7 devices : - name : \"living room shutter\" id : \"living_room_shutter\" type : SHUTTER internalDevices : stopRelay : name : \"living room shutter stop relay\" id : \"lr_shutter_stop_relay\" type : RELAY wires : [ \"GREEN\" ] upDownRelay : name : \"living room shutter up-down relay\" id : \"lr_shutter_updown_relay\" type : RELAY wires : [ \"GREEN_WHITE\" ] config : fullCloseTimeMs : 20000 fullOpenTimeMs : 27000 Wiring Window roller shutters are realized using 2-channel electromechanical (EMR) relay module (one relay for going up/down and another one relay for the stop/start). Relays should be controlled with LOW signal. Between MqGateway and the 2-channel relay module: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN1 any-digital IN2 Connect neutral wire and earth directly to the roller shutter wires. Between relay module and roller shutter control: RELAY 1 CONNECTOR COM Live wire (from grid) NO Wire to Relay 2 COM NC nothing RELAY 2 CONNECTOR COM Wire from Relay 1 NO NO Go up wire from shutter NC Go down wire from shutter Gate / garage door Garage door or gate (fence) control. Use connection in the gate opener usually used to connect control buttons. It may be eiter single button ( actionButton ) or three separate buttons ( openButton, closeButton and stopButton ). It is possible to add open and closed reed switches for better control and position information ( openReedSwitch and closedReedSwitch ). Emulated switches are realized with relay modules. configuration type: GATE internal devices: actionButton ( emulated switch ) - either this one or stopButton , openButton and closeButton are required stopButton ( emulated switch ) - either this one or actionButton is required openButton ( emulated switch ) - either this one or actionButton is required closeButton ( emulated switch ) - either this one or actionButton is required openReedSwitch ( reed switch ) closedReedSwitch ( reed switch ) additional configuration: haDeviceClass [one of: garage , gate] - device class of cover for Home Assistant MQTT discovery Example configuration rooms : - name : \"garage\" points : - name : \"garage door\" portNumber : 4 devices : - name : \"Right garage door\" # single button device example id : \"right_garage_door\" type : GATE internalDevices : actionButton : name : \"Right garage door action button\" id : \"right_garage_door_action_button\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH openReedSwitch : # optional name : \"Right garage door open reed switch\" id : \"right_garage_door_open_reed\" wires : [ \"GREEN\" ] type : REED_SWITCH config : debounceMs : 50 closedReedSwitch : # optional name : \"Right garage door closed reed switch\" id : \"right_garage_door_closed_reed\" wires : [ \"GREEN_WHITE\" ] type : REED_SWITCH config : debounceMs : 50 - name : outdoor points : - name : \"Entrance gate\" portNumber : 20 devices : - name : \"Entrance gate\" # three buttons device example id : \"entrance_gate\" type : GATE internalDevices : openButton : name : \"Open - entrance gate\" id : \"entrance_gate_open\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH closeButton : name : \"Close - entrance gate\" id : \"entrance_gate_close\" wires : [ \"BLUE\" ] type : EMULATED_SWITCH stopButton : name : \"Stop - entrance gate\" id : \"entrance_gate_stop\" wires : [ \"GREEN\" ] type : EMULATED_SWITCH closedReedSwitch : # optional, can be also replaced with openReedSwitch name : \"Closed gate reed switch\" id : \"entrance_gate_closed_reed_switch\" wires : [ \"GREEN_WHITE\" ] type : REED_SWITCH config : haDeviceClass : gate # \"garage\" by default Wiring Single button gate (garage door) is realized using electromechanical (EMR) relay module to emulate push button. Relay should be controlled with LOW signal. Between MqGateway and the relay module: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN Relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. RELAY CONNECTOR COM button connection wire NO button connection wire NC nothing Three buttons gate (garage door) is realized using 3-channel electromechanical (EMR) relay module to emulate push button for each function. Relay module should be controlled with LOW signal. Between MqGateway and the 3-channel relay module: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN1 any-digital IN2 any-digital IN3 Each relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. This connection needs to be repeated for each relay - button. RELAY 1,2,3 CONNECTOR COM button connection wire NO button connection wire NC nothing MySensors devices/nodes with RS485 Controller This group of devices requires RS485 MySensors node on the side of the device for communication with MqGateway. This controller might be any microcontroller which is able to communicate through RS485 with 5V. Common choice is the Arduino Pro Mini board. More about how to connect and use MySensors devices with RS485 node can be found in MySensors node page Wiring Wiring between MqGateway and MySensor node is the same for all devices below. For RS485 connection (with MAX485 module on both sides): WIRE COLOR CONTROLLER PIN orange-white (GND) GND orange (5V) VCC green-white (ask wire) GPIO 2 green (ping wire) GPIO 7 brown-white A (RS485) brown B (RS485) BME280 Temperature, humidity and barometric pressure sensor. Requires MySensors node. configuration type: BME280 wires: always needs to be set to [\"BROWN_WHITE\", \"BROWN\"] additional configuration: mySensorsNodeId [required] - MySensors node identifier humidityChildSensorId [default: 0] - MySensors child sensor identifier for humidity temperatureChildSensorId\" [default: 1] - MySensors child sensor identifier for temperature pressureChildSensorId\" [default: 2] - MySensors child sensor identifier for pressure debugChildSensorId\" [default: 3] - MySensors child sensor identifier for debug data from node Example configuration [ ... ] rooms : - name : \"Kids room\" points : - name : \"Kids room measurement box\" portNumber : 14 devices : - name : \"Kids room box\" id : \"bme280_kids_room\" wires : [ \"BROWN_WHITE\" , \"BROWN\" ] type : BME280 config : mySensorsNodeId : 2 humidityChildSensorId : 0 temperatureChildSensorId : 1 pressureChildSensorId : 2 debugChildSensorId : 3 DHT22 Temperature and humidity sensor. Requires MySensors node. configuration type: DHT22 wires: always needs to be set to [\"BROWN_WHITE\", \"BROWN\"] additional configuration: mySensorsNodeId [required] - MySensors node identifier humidityChildSensorId [default: 0] - MySensors child sensor identifier for humidity temperatureChildSensorId\" [default: 1] - MySensors child sensor identifier for temperature debugChildSensorId\" [default: 2] - MySensors child sensor identifier for debug data from node Example configuration [ ... ] rooms : - name : \"Kids room\" points : - name : \"Kids room measurement box\" portNumber : 14 devices : - name : \"Kids room box\" id : \"bme280_kids_room\" wires : [ \"BROWN_WHITE\" , \"BROWN\" ] type : DHT22 config : mySensorsNodeId : 13 humidityChildSensorId : 0 temperatureChildSensorId : 1 debugChildSensorId : 2","title":"Supported devices"},{"location":"user-guide/supported-devices/#digital-devices","text":"","title":"Digital devices"},{"location":"user-guide/supported-devices/#relay-module","text":"Relay module which allows turning on/off electrical devices and lights. Controlled with LOW signal by default. configuration type: RELAY additional configuration: triggerLevel [one of: LOW , HIGH] - The signal LEVEL which triggers the relay and closes the circuit haComponent [one of: switch , light] - type of the entity for Home Assistant MQTT discovery Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"point with relay\" portNumber : 1 devices : - name : \"workshop light\" id : \"workshop_light\" wires : [ \"BLUE\" ] type : RELAY config : triggerLevel : \"HIGH\" haComponent : \"light\" Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module working with 5V power can be used. Relay should be controlled with LOW signal. Any digital wire can be used for communication: blue, blue-white, green, green-white. WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN","title":"Relay module"},{"location":"user-guide/supported-devices/#switch-button","text":"Switch button or push button. configuration type: SWITCH_BUTTON additional configuration: debounceMs [default: 50] - number of milliseconds for debounce (helps to avoid flickering) longPressTimeMs [default: 1000] - if switch button is pressed for longer then this value (in milliseconds) then \"long press\" event is sent from MqGateway haComponent [one of: binary_sensor , trigger, sensor] - type of the entity for Home Assistant MQTT discovery Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"point with relay\" portNumber : 1 devices : - name : \"workshop light switch\" id : \"workshop_light_switch\" wires : [ \"BLUE_WHITE\" ] type : SWITCH_BUTTON config : longPressTimeMs : 800 debounceMs : 80 haComponent : \"sensor\" Wiring Any regular switch/push button can be used for that. Orange-white wire (GND) and one of the digital wires (blue, blue-white, green, green-white) should be used.","title":"Switch button"},{"location":"user-guide/supported-devices/#emulated-switch","text":"Emulates switch button press with changing digital output from HIGH to LOW for 500ms and back to HIGH state. It is useful for controlling devices which has possibility to connect switch button (e.g. garage gate opener). configuration type: EMULATED_SWITCH additional configuration: NONE Example configuration [ ... ] rooms : - name : \"garage\" points : - name : \"2-channels relay module\" portNumber : 1 devices : - name : \"Right gate\" id : \"garage_right_gate\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH Wiring Emulated switch is realized using electromechanical relay (EMR - the most common type). Between MqGateway and the relay: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN Between the relay and gate opener, use COM and NO on the relay. On the gate opener side - connect wires according to your gate opener manual for connecting wall switch button.","title":"Emulated switch"},{"location":"user-guide/supported-devices/#motion-detector","text":"PIR Motion Sensor/Detector. configuration type: MOTION_DETECTOR additional configuration: debounceMs [default: 50] - number of milliseconds for debounce (helps to avoid flickering) motionSignalLevel [one of: HIGH , LOW] - The signal LEVEL which means that motion has been detected Example configuration [ ... ] rooms : - name : \"garage\" points : - name : \"Right garage entry\" portNumber : 1 devices : - name : \"Garage motion\" id : \"garage_motion\" wires : [ \"GREEN\" ] type : MOTION_DETECTOR config : debounceMs : 100 motionSignalLevel : LOW Wiring WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital OUT","title":"Motion detector"},{"location":"user-guide/supported-devices/#reed-switch","text":"A magnetic sensor which might be used to check if door or window is open/closed. configuration type: REED_SWITCH additional configuration: debounceMs [default: 50] - number of milliseconds for debounce (helps to avoid flickering) Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"Workshop over door box\" portNumber : 1 devices : - name : \"Workshop door\" id : \"workshop_door\" wires : [ \"GREEN\" ] type : REED_SWITCH config : debounceMs : 100 Wiring Any reed switch can be used for that. Orange-white wire (GND) and one of the digital wires (blue, blue-white, green, green-white) should be used.","title":"Reed switch"},{"location":"user-guide/supported-devices/#timer-switch","text":"Switch which can be turned on for a given time and will be automatically turned off after that time. Typical use case for this device is a sprinkler system which you want to turn off after specified time even if your main automation system has failed for any reason. configuration type: TIMER_SWITCH additional configuration: NONE Example configuration [ ... ] rooms : - name : \"garage\" points : - name : \"sprinklers box\" portNumber : 5 devices : - name : \"Sprinklers zone 1\" id : \"sprinklers_zone_1\" wires : [ \"GREEN_WHITE\" ] type : TIMER_SWITCH Wiring Both solid-state (SSR) relay and electromechanical (EMR) relay module working with 5V power can be used. Relay should be controlled with LOW signal. Any digital wire can be used for communication: blue, blue-white, green, green-white. WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN","title":"Timer switch"},{"location":"user-guide/supported-devices/#window-shutter","text":"Window shutter/roller blind control. Replaces the regular switch button control with 2-channels relay module. Allows to fully open/close shutters and partial opening with percentage (e.g. 30% open). configuration type: SHUTTER internal devices: stopRelay ( relay ) [required] upDownRelay ( relay ) [required] additional configuration: fullCloseTimeMs [required] - time in milliseconds for the shutter from being fully open to fully closed fullOpenTimeMs [required] - time in milliseconds for the shutter from being fully closed to fully open Example configuration rooms : - name : \"living room\" points : - name : \"shutters controller relays\" portNumber : 7 devices : - name : \"living room shutter\" id : \"living_room_shutter\" type : SHUTTER internalDevices : stopRelay : name : \"living room shutter stop relay\" id : \"lr_shutter_stop_relay\" type : RELAY wires : [ \"GREEN\" ] upDownRelay : name : \"living room shutter up-down relay\" id : \"lr_shutter_updown_relay\" type : RELAY wires : [ \"GREEN_WHITE\" ] config : fullCloseTimeMs : 20000 fullOpenTimeMs : 27000 Wiring Window roller shutters are realized using 2-channel electromechanical (EMR) relay module (one relay for going up/down and another one relay for the stop/start). Relays should be controlled with LOW signal. Between MqGateway and the 2-channel relay module: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN1 any-digital IN2 Connect neutral wire and earth directly to the roller shutter wires. Between relay module and roller shutter control: RELAY 1 CONNECTOR COM Live wire (from grid) NO Wire to Relay 2 COM NC nothing RELAY 2 CONNECTOR COM Wire from Relay 1 NO NO Go up wire from shutter NC Go down wire from shutter","title":"Window shutter"},{"location":"user-guide/supported-devices/#gate-garage-door","text":"Garage door or gate (fence) control. Use connection in the gate opener usually used to connect control buttons. It may be eiter single button ( actionButton ) or three separate buttons ( openButton, closeButton and stopButton ). It is possible to add open and closed reed switches for better control and position information ( openReedSwitch and closedReedSwitch ). Emulated switches are realized with relay modules. configuration type: GATE internal devices: actionButton ( emulated switch ) - either this one or stopButton , openButton and closeButton are required stopButton ( emulated switch ) - either this one or actionButton is required openButton ( emulated switch ) - either this one or actionButton is required closeButton ( emulated switch ) - either this one or actionButton is required openReedSwitch ( reed switch ) closedReedSwitch ( reed switch ) additional configuration: haDeviceClass [one of: garage , gate] - device class of cover for Home Assistant MQTT discovery Example configuration rooms : - name : \"garage\" points : - name : \"garage door\" portNumber : 4 devices : - name : \"Right garage door\" # single button device example id : \"right_garage_door\" type : GATE internalDevices : actionButton : name : \"Right garage door action button\" id : \"right_garage_door_action_button\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH openReedSwitch : # optional name : \"Right garage door open reed switch\" id : \"right_garage_door_open_reed\" wires : [ \"GREEN\" ] type : REED_SWITCH config : debounceMs : 50 closedReedSwitch : # optional name : \"Right garage door closed reed switch\" id : \"right_garage_door_closed_reed\" wires : [ \"GREEN_WHITE\" ] type : REED_SWITCH config : debounceMs : 50 - name : outdoor points : - name : \"Entrance gate\" portNumber : 20 devices : - name : \"Entrance gate\" # three buttons device example id : \"entrance_gate\" type : GATE internalDevices : openButton : name : \"Open - entrance gate\" id : \"entrance_gate_open\" wires : [ \"BLUE_WHITE\" ] type : EMULATED_SWITCH closeButton : name : \"Close - entrance gate\" id : \"entrance_gate_close\" wires : [ \"BLUE\" ] type : EMULATED_SWITCH stopButton : name : \"Stop - entrance gate\" id : \"entrance_gate_stop\" wires : [ \"GREEN\" ] type : EMULATED_SWITCH closedReedSwitch : # optional, can be also replaced with openReedSwitch name : \"Closed gate reed switch\" id : \"entrance_gate_closed_reed_switch\" wires : [ \"GREEN_WHITE\" ] type : REED_SWITCH config : haDeviceClass : gate # \"garage\" by default Wiring Single button gate (garage door) is realized using electromechanical (EMR) relay module to emulate push button. Relay should be controlled with LOW signal. Between MqGateway and the relay module: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN Relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. RELAY CONNECTOR COM button connection wire NO button connection wire NC nothing Three buttons gate (garage door) is realized using 3-channel electromechanical (EMR) relay module to emulate push button for each function. Relay module should be controlled with LOW signal. Between MqGateway and the 3-channel relay module: WIRE COLOR RELAY PIN orange (5V) VCC / D+ orange-white (GND) GND / D- any-digital IN1 any-digital IN2 any-digital IN3 Each relay module should be connected with COM and NO to the gate (garage door) opener in the place for connecting push button. This connection needs to be repeated for each relay - button. RELAY 1,2,3 CONNECTOR COM button connection wire NO button connection wire NC nothing","title":"Gate / garage door"},{"location":"user-guide/supported-devices/#mysensors-devicesnodes-with-rs485-controller","text":"This group of devices requires RS485 MySensors node on the side of the device for communication with MqGateway. This controller might be any microcontroller which is able to communicate through RS485 with 5V. Common choice is the Arduino Pro Mini board. More about how to connect and use MySensors devices with RS485 node can be found in MySensors node page Wiring Wiring between MqGateway and MySensor node is the same for all devices below. For RS485 connection (with MAX485 module on both sides): WIRE COLOR CONTROLLER PIN orange-white (GND) GND orange (5V) VCC green-white (ask wire) GPIO 2 green (ping wire) GPIO 7 brown-white A (RS485) brown B (RS485)","title":"MySensors devices/nodes with RS485 Controller"},{"location":"user-guide/supported-devices/#bme280","text":"Temperature, humidity and barometric pressure sensor. Requires MySensors node. configuration type: BME280 wires: always needs to be set to [\"BROWN_WHITE\", \"BROWN\"] additional configuration: mySensorsNodeId [required] - MySensors node identifier humidityChildSensorId [default: 0] - MySensors child sensor identifier for humidity temperatureChildSensorId\" [default: 1] - MySensors child sensor identifier for temperature pressureChildSensorId\" [default: 2] - MySensors child sensor identifier for pressure debugChildSensorId\" [default: 3] - MySensors child sensor identifier for debug data from node Example configuration [ ... ] rooms : - name : \"Kids room\" points : - name : \"Kids room measurement box\" portNumber : 14 devices : - name : \"Kids room box\" id : \"bme280_kids_room\" wires : [ \"BROWN_WHITE\" , \"BROWN\" ] type : BME280 config : mySensorsNodeId : 2 humidityChildSensorId : 0 temperatureChildSensorId : 1 pressureChildSensorId : 2 debugChildSensorId : 3","title":"BME280"},{"location":"user-guide/supported-devices/#dht22","text":"Temperature and humidity sensor. Requires MySensors node. configuration type: DHT22 wires: always needs to be set to [\"BROWN_WHITE\", \"BROWN\"] additional configuration: mySensorsNodeId [required] - MySensors node identifier humidityChildSensorId [default: 0] - MySensors child sensor identifier for humidity temperatureChildSensorId\" [default: 1] - MySensors child sensor identifier for temperature debugChildSensorId\" [default: 2] - MySensors child sensor identifier for debug data from node Example configuration [ ... ] rooms : - name : \"Kids room\" points : - name : \"Kids room measurement box\" portNumber : 14 devices : - name : \"Kids room box\" id : \"bme280_kids_room\" wires : [ \"BROWN_WHITE\" , \"BROWN\" ] type : DHT22 config : mySensorsNodeId : 13 humidityChildSensorId : 0 temperatureChildSensorId : 1 debugChildSensorId : 2","title":"DHT22"},{"location":"user-guide/troubleshooting/","text":"Switch button doesn't work properly - sometimes it sends message multiple times even when pressed once Debounce value is too low. See Switch button in supported devices section for details.","title":"Troubleshooting"},{"location":"user-guide/troubleshooting/#switch-button-doesnt-work-properly-sometimes-it-sends-message-multiple-times-even-when-pressed-once","text":"Debounce value is too low. See Switch button in supported devices section for details.","title":"Switch button doesn't work properly - sometimes it sends message multiple times even when pressed once"}]}